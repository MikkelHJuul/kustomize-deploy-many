#!/bin/bash

debug=0
OLD_IFS=$IFS

function debug() {
	if (($debug)); then
		echo "$1" >> debug.log
	fi
}

function set_debug() {
	debug=1
	debug_name='--debug '
	debug "initiated debug from $1"
}

## common arguments
files_to_process=
command=$1
shift
start=
if [[ "$1" == *"debug" ]]; then
	set_debug "early debug"
	shift
	debug "variables left: $@"
fi
if [[ "$1" == "--" ]]; then
	shift
	debug "files processed without kustomization folder: $@"
	files_to_process=$@
else
	start="${1%/}"
	if [[ $start != "$(pwd)"* ]]; then
		start="$(pwd)/$start"
	fi
	if [[ "$2" == *"debug" ]]; then
		set_debug "variable after kustomization folder"
		shift
	fi
	debug "values are now: $@"
	debug "given kustomization location: $start"  #1 because of shift
	debug "verified pwd to path: $start "
	shift
	shift
	if [[ "$1" == "--" ]]; then
		shift
		debug "files to be processed: $@"
		files_to_process=$@
	fi
fi


function path_relative_to() {
	debug "will now find path: $2, relative to: $1"
	full_first_path="$(readlink -e $1)"
	debug "full-path: $full_first_path"
	if [ -z "$2" -o "$2" == "." -o -f "$full_first_path/$2" ];then 
		debug "returning initial path"
		echo "$full_first_path"
	else
		debug "finding new full path from a relative path"
		echo $(cd "$full_first_path" && cd "$(readlink -e $2)" && pwd)
	fi
}

function resources_from_kustomization() {
	debug "stat resources: $1"
	local kustomization_file="$1/kustomization.y*ml"
	if [ -f $1/variation.y*ml -a "$(yq r $1/variation.y*ml kind)" == "ConfigVariation"]; then
		resources="$(ls $1/variation.y*ml)"
	else
		debug "no variation.yaml or the file is not of \"kind: ConfigVariation\""
	fi
	if [ -f $1/kustomization.y*ml ]; then
		local resources bases_str bases
		bases_str="$(yq r $kustomization_file bases | sed -En 's/- //p')"
		bases=($bases_str)
		debug "- bases: $bases_str"
		for base in "${bases[@]}"; do
			base="${base%/}"
			debug "-- base: $base"
			resources="$resources $(resources_from_kustomization $(path_relative_to $1 $base))"	
		done
		debug "resources found: $resources"
		echo "$resources"
	else
		debug "no such file: $kustomization_file"
	fi
}

function extract_header_from() {
	debug "header: $(head -1 "$1")"
	echo "$(read_csv_line $(head -1 "$1"))"
}

function read_csv_line() {
	debug "csv hack: $(echo $1 | sed -r 's/("[^",]*),([^",]*")/\1###\2/g' | sed -r 's/,/造/g' | sed -r 's/###/,/g')"
	echo "$(echo $1 | sed -r 's/("[^",]*),([^",]*")/\1###\2/g' | sed -r 's/,/造/g' | sed -r 's/###/,/g')"  # hack to preserve commas
}

function backup() {
	if [ ! -f "$1" ]; then
		echo -e "\e[31m[ERROR]\e[0m: attempted to back up a folder: $1, this is not permitted"
		exit 1
	fi
	debug "backing up resource $1"
	mv "$1" "$1.bak"
	rm -f "$1"
	touch "$1"
}

function find_yaml_files() {
	variation_files=($1)
	local targets
	for variation_file in "${variation_files[@]}"; do
		resource_location="${variation_file%/*}"
		for k in $(seq 0 $(("$(yq r $variation_file variations -l)" -1))); do
			relative_target="$(yq r $variation_file variations.[$k].targetConfig)"
			relative_path="${relative_target%/*}"
			file_name="${relative_target##*/}"
			targets="$targets $(path_relative_to $resource_location $relative_path)/$file_name"
		done
	done
	echo "$targets"
}

function explode_from_csv_source() {
	head_str=$(extract_header_from "$1")
	IFS="造" head=($head_str)
	debug "number of header-items found: ${#head[@]}"
	sed 1d "$1" | while read line
	do
		IFS="造" values=($(read_csv_line "$line"))
		for ((i = 0; i < ${#head[@]}; ++i)); do
			if [[ ! -z "${head[$i]}" ]]; then
				debug "setting environment variable: ${head[$i]}, to value: ${values[$i]}"
				export "${head[$i]}"="${values[$i]}"
			fi
		done
		envsubst < "$2.bak" >> "$2"
		echo "" >> "$2"
		echo "---" >> "$2"
	done
  	for ((i = 0; i < ${#head[@]}; ++i)); do
		debug "remove exported csv value: ${values[$i]}, for key: ${head[$i]}"
		test ! -z "${head[$i]}" && export "${head[$i]}"=
	done 	
}

function explode_from_literals() {
	local literals="$1" str_list lit_list key value
	if [ ! -z "$literals" ];then 
		debug "literals: $literals, vs. target: $2"
		last="$(("$(echo $literals | yq r - -l)" -1))"
		for j in $(seq 0 $last); do
			debug "running index $j"
			unset IFS
			yaml_list=$(echo $literals | yq r - "[$j]" -P)
			str_list=$(echo $yaml_list | sed 's/: /|/g')
			debug "$j:: elements: $str_list"
			IFS=' ' read -a lit_list <<< "$str_list"
			for literal in "${lit_list[@]}"; do
				IFS='|' read -r key value <<< "$literal"
				debug "setting environment variable: $key, to value: $value"
				export "$key"="$value"
			done
			envsubst < "$2.bak" >> "$2"
			echo "" >> "$2"
			echo "---" >> "$2"
			for literal in "${lit_list[@]}"; do
				IFS='|' read -r key value <<< "$literal"
				debug "remove exported literal value: $value, for key: $key"
				test ! -z "$key" && export "$key"=
			done
		done
  	else
  		debug "no literals"
	fi 
}


function build_yamls() {
	debug "exploding yamls, from list of variation.yaml's"
	resource_list=($1)
	for resource in "${resource_list[@]}"; do
		if [[ $resource != "$(pwd)"* ]]; then
			resource="$(pwd)/$resource"
		fi
		debug "building ConfigVariation: $resource"
		resource_location="${resource%/*}"
		for i_b_y in $(seq 0 $(("$(yq r $resource variations -l)" -1))); do
			relative_target="$(yq r $resource variations.[$i_b_y].targetConfig)"
			relative_path="${relative_target%/*}"
			file_name="${relative_target##*/}"
			target_config="$(path_relative_to $resource_location $relative_path)/$file_name"
			debug "targetConfig: $relative_target full path: $target_config"
			backup "$target_config"
			relative_csv="$(yq r $resource variations[$i_b_y].vary.csvSource)"
			if [ ! -z "$relative_csv" ]; then
				debug "found a relative csv-source: $relative_csv"
				relative_path="${relative_csv%/*}"
				file_name="${relative_csv##*/}"
				debug "relative path: $relative_path and file name: $file_name"
				csv_source="$(path_relative_to $resource_location $relative_path)/$file_name"
				explode_from_csv_source "$csv_source" "$target_config" 
			fi
			debug "Handle literals"
			literals=$(yq r $resource variations[$i_b_y].vary.literals -j)
			debug "literals to send: $literals"
			unset IFS
			explode_from_literals "$literals" "$target_config"
			sed -i '$d' "$target_config" 
		done
	done
	debug "yamls were built"
}

function() {
	debug "revertingfile: $1"
	mv "$1.bak" "$1"
	rm -f "$1.bak"
} 

function clean_up() {
	debug "reverting .bak-files"
	resource_list=($1)
	for resource in "${resource_list[@]}"; do
		if [ -f "$resource.bak" ]; then
			revert_file "$resource"
		fi
	done
	debug "done reverting backup-files"
}

case "$command" in
build)
	debug "exploding yamls, with command: build"
	build_yamls "$files_to_process"
;;
build-folder)
	debug "exploding yamls"
	$0 build "$debug_name" -- $(resources_from_kustomization "$start")
;;
kustomize)
	debug "building kustomization resources"
	if [ ! -z $files_to_process ]; then
		$0 build "$debug_name" -- $files_to_process
	else
		$0 build-folder "$start" "$debug_name"
	fi
	kubectl kustomize "$start"
;;
clean)
	debug "cleaning up resources"
	if [ ! -z $files_to_process ]; then
		clean_up $(find_yaml_files $files_to_process)
	else
		clean_up $(find_yaml_files $(resources_from_kustomization "$start"))
	fi
	echo "done!"
;;
deploy)
	debug "deploying: $start"
	if [ ! -z $files_to_process ]; then
		$0 kustomize "$start" "$debug_name" -- "$files_to_process" | envsubst | kubectl apply -f -
	else
		$0 kustomize "$start" "$debug_name" | envsubst | kubectl apply -f -
	fi
;;
*)
    echo "Usage: $0 {build|build-folder|kustomize|clean|deploy} [my/path/to/kustomization/folder] [--debug] [-- [files/to/map]]"
    exit 1
;;
esac

if (($debug)); then
	cat debug.log
fi