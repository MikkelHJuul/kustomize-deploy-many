#!/bin/bash

debug=0
OLD_IFS=$IFS

tmpfile=$(mktemp) 

exec {out_W}>"$tmpfile"  
exec {out_R}<"$tmpfile"  
rm "$tmpfile"

tmpfile_2=$(mktemp) 

exec {debug_W}>"$tmpfile_2"  
exec {debug_R}<"$tmpfile_2"  
rm "$tmpfile_2"


function debug() {
	if (($debug)); then
		echo "$1" >&$debug_W
	fi
}

files_to_process=
extra_commands=
command=$1
shift
while [ "$1" != "--" ]; do
	if [[ "$1" == *"debug" ]]; then
		debug=1
	else 
		extra_commands="$extra_commands $1"
	fi
	shift
done
shift
debug "files to be processed: $@"
files_to_process=$@

kind='ConfigVariation'
api_version='variation.configs.k8s.io/v1beta1'

function path_relative_to() {
	debug "will now find path: $2, relative to: $1"
	full_first_path="$(readlink -e $1)"
	debug "full-path: $full_first_path"
	if [ -z "$2" -o "$2" == "." -o -f "$full_first_path/$2" ];then 
		debug "returning initial path"
		echo "$full_first_path"
	else
		debug "finding new full path from a relative path"
		echo $(cd "$full_first_path" && cd "$(readlink -e $2)" && pwd)
	fi
}

function extract_header_from() {
	debug "header: $(head -1 "$1")"
	echo "$(read_csv_line $(head -1 "$1"))"
}

function read_csv_line() {
	debug "csv hack: $(echo $1 | sed -r 's/("[^",]*),([^",]*")/\1###\2/g' | sed -r 's/,/造/g' | sed -r 's/###/,/g')"
	echo "$(echo $1 | sed -r 's/("[^",]*),([^",]*")/\1###\2/g' | sed -r 's/,/造/g' | sed -r 's/###/,/g')"  # hack to preserve commas
}

function find_yaml_files() {
	variation_files=($1)
	local targets
	for variation_file in "${variation_files[@]}"; do
		resource_location="${variation_file%/*}"
		for k in $(seq 0 $(("$(yq r $variation_file variations -l)" -1))); do
			relative_target="$(yq r $variation_file variations.[$k].targetConfig)"
			relative_path="${relative_target%/*}"
			file_name="${relative_target##*/}"
			targets="$targets $(path_relative_to $resource_location $relative_path)/$file_name"
		done
	done
	echo "$targets"
}

function to_output() {
	debug "printing output: $1"
	envsubst < "$1" >&$out_W
	echo "" >&$out_W  
	echo "---" >&$out_W  
}

function explode_from_csv_source() {
	head_str=$(extract_header_from "$1")
	IFS="造" head=($head_str)
	debug "number of header-items found: ${#head[@]}"
	sed 1d "$1" | while read line
	do
		IFS="造" values=($(read_csv_line "$line"))
		for ((i = 0; i < ${#head[@]}; ++i)); do
			if [[ ! -z "${head[$i]}" ]]; then
				debug "setting environment variable: ${head[$i]}, to value: ${values[$i]}"
				export "${head[$i]}"="${values[$i]}"
			fi
		done
		to_output "$2"
	done
  	for ((i = 0; i < ${#head[@]}; ++i)); do
		debug "remove exported csv value: ${values[$i]}, for key: ${head[$i]}"
		test ! -z "${head[$i]}" && export "${head[$i]}"=
	done 	
}

function explode_from_literals() {
	local literals="$1" str_list lit_list key value
	if [ ! -z "$literals" ];then 
		debug "literals: $literals, vs. target: $2"
		last="$(("$(echo $literals | yq r - -l)" -1))"
		for j in $(seq 0 $last); do
			debug "running index $j"
			unset IFS
			yaml_list=$(echo $literals | yq r - "[$j]" -P)
			str_list=$(echo $yaml_list | sed 's/: /|/g')
			debug "$j:: elements: $str_list"
			IFS=' ' read -a lit_list <<< "$str_list"
			for literal in "${lit_list[@]}"; do
				IFS='|' read -r key value <<< "$literal"
				debug "setting environment variable: $key, to value: $value"
				export "$key"="$value"
			done
			to_output "$2" 
			for literal in "${lit_list[@]}"; do
				IFS='|' read -r key value <<< "$literal"
				debug "remove exported literal value: $value, for key: $key"
				test ! -z "$key" && export "$key"=
			done
		done
  	else
  		debug "no literals"
	fi 
}


function build_yamls() {
	debug "exploding yamls, from list of variation.yaml's"
	resource_list=($1)
	for resource in "${resource_list[@]}"; do
		if [[ $resource != "$(pwd)"* ]]; then
			resource="$(pwd)/$resource"
		fi
		if [[ "$(yq r $resource kind)" != "$kind" ]]; then
			echo "resource $resource is not of 'kind': $kind"
		fi
		if [[ "$(yq r $resource apiVersion)" != "$api_version" ]]; then
			echo "resource $resource is not of 'apiVersion': $api_version"
		fi	
		debug "building ConfigVariation: $resource"
		resource_location="${resource%/*}"
		for i_b_y in $(seq 0 $(("$(yq r $resource variations -l)" -1))); do
			relative_target="$(yq r $resource variations.[$i_b_y].targetConfig)"
			target_config="$(path_relative_to $resource_location ${relative_target%/*})/${relative_target##*/}"
			debug "targetConfig: $relative_target full path: $target_config"
			relative_csv="$(yq r $resource variations[$i_b_y].vary.csvSource)"
			if [ ! -z "$relative_csv" ]; then
				debug "found a relative csv-source: $relative_csv"
				debug "relative path: $relative_path and file name: $file_name"
				csv_source="$(path_relative_to $resource_location ${relative_csv%/*})/${relative_csv##*/}"
				explode_from_csv_source "$csv_source" "$target_config" 
			fi
			debug "Handle literals"
			literals=$(yq r $resource variations[$i_b_y].vary.literals -j)
			debug "literals to send: $literals"
			unset IFS
			explode_from_literals "$literals" "$target_config"
		done
		for i_e_c in $(seq 0 $(("$(yq r $resource extraConfigs -l)" -1))); do
			relative_config="$(yq r $resource extraConfigs.[$i_e_c])"
			target_config="$(path_relative_to $resource_location ${relative_config%/*})/${relative_config##*/}"
			to_output "$target_config"
		done
	done
	debug "yamls were built"
}

case "$command" in
build)
	debug "building yamls"
	err=$(build_yamls "$files_to_process")
	if [ ! -z "$err" ]; then
		echo -e "\033[31m[ERROR]\033[0m: $err"
		exit 1 #TODO fix double printing
	else 
		cat <&$out_R | sed -r '$d'
	fi
;;
deploy)
	debug "there is no debug-info in the build stage when running 'deploy', run command 'build' in stead"
	$0 build -- "$files_to_process" | envsubst | kubectl apply "$extra_commands" -f -
;;
*)
    echo "Usage: $0 {build|deploy} [--debug] -- [files/to/map]"
    exit 1
;;
esac

if (($debug)); then
	cat <&$debug_R
fi